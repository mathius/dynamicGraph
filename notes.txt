### USER INTERFACE

- v casovom momente
- v intervale
- pocas celej existencie grafu

- zapnut generovanie grafov
  - 1 parameter s prefixom nazvu suboru
  - vypisovat kolko minut bude este hrana existovat
- vypnut generovanie grafov

- analyzovat, v ktorych okamihoch nastala zmena
  - ak graph, vyegenerovat .dot pre kazdy casovy okamih v danom intervale, kde nastala zmena
  - varovanie ak sa vygeneruje viac ako 10 suborov
- najst najvacsiu komponentu a prvy casovy okamih, v ktorom existuje
  - vypisat jej velkost, vrcholy a hrany
  - ak graph, vygeneruje .dot v prvom okamihu existencie tej najvacsej komponenty, najvacsia komponenta bude odlisena farebne
- analyzovat vrchol (vsetky hrany existujuce aspon v 1 momente v zadanom casovom intervale)
- vypisat prehlad komponent zaciatocnom casovom momente
  - ak graph, vygenerovat dot
- statistika vrcholov
  - vrchol s najvacsim/najmensim poctom hran
  - yvpise sa vrchol, pocet E hran
- statistika hran
  - hrana s najdlhsim/najkratsim(trvanie >=1 ) trvanim
  - vypisaju sa vrcholy, trvanie od-do

### FORMAT SUBOROV

format grafu
- synax, syntax timestamp
- vrcholy a-zA-Z0-9 stringy zacinajuce malym pismenom
- bez hran a->a
- trvanie hran je >=0
- neE 2 hrany medzi a,b v 1 okamihu

### GENERATOR DAT

vstup:
  - počet vrcholů -- vertices( V ).
    - V > 0
  - interval počtu hran edges( Min, Max ) v každém časovém okamžiku
    - musí platit Min <= Max /\ Max <= ( V*(V-1) ) / 2
  - počet vrcholů
  - predikát new_edge( Time, Probability ), který pro daný čas vrací
    pravděpodobnost vzniku hrany mezi libovonlými nespojenými vrcholy
    - musí platit Min <= Max
  - predikát remove_edge( Time, Duration, Probability ), který pro daný čas
    a dobu aktuálního trvání hrany, vrací pravděpodobnost, že hrana v tomto
    časovém okamžiku zanikne
  - musí platit 0 <= Probability <= 1, floating point
  - doba trvání grafu duration( BeginTime, EndTime )
    - BeginTime <= EndTime
    - BeginTime, EndTime :: DateTime

graph generation
  - Q_A <- queue of all possible edges (without time -- pairs of vertices)
  - each minute T from BeginTime to EndTime
    - foreach edge E \in Graph( T )
      - call remove_edge with current time T and current duration of E
        - remove E with Probability
          - if removed push to Q_A
    - call new_edge( T, Probability ).
    - Q_a <- empty queue
    - while not empty Q_A
      - E = pop( Q_A )
      - if current edge count == Max
        - push all edges from Q_a to Q_A
        - continue to next minute
      - with Probability add E to graph
        - if not push add E to Q_a
   - if Q_A is empty and current edge count < Min
      - while current edge count < Min
        - E = pop( Q_a )
        - with Probability add E to graph
          - if not added push E to Q_a
    - swap( Q_A, Q_a ) ( Q_A was empty )


Formát vstupu:
  - vstup od uživatele na příkaz create_graph( Filename ).
  - dávkový stup ze souboru
    - soubor může obsahovat více deklarací grafu, pak jsou generovány postupně
      - deklarace začíná klauzulí create_graph( Filename ).
      - pokračuje až po další klauzuli create_graph( Filename2 ), nebo
        po end_of_file
  - příslušný typ generátoru je automaticky detekován.

Práce se vstupem:
  - pokud generátor očekává na dané pozici výstupní číselnou hodnotu, je nutné
    aby hodnota byla aritmeticky vyhodnotitelná (tedy se může jednat o číslo,
    nebo aritmetický výraz -- viz duration/1 v příkladech).
  - v přípdě, že vstup nebude korektní, tedy bude například kombinovat predikáty
    z různých generátorů, generátor ohlásí chybu a odmítne generovat
  - v případě, že je dodán nekorektní vstup a je tak zjištěno po začátku generování
    (rozšířený generátor), generátor vypíše varování a ukončí generování v daném
    okamžiku (vrátí dosud vygenerovaný graf).
  - obdobně, v případě, že selže některý z uživatelem dodaných predikátů generátor
    vypíše varování a korektně ukončí generování v daném okamžiku
  - v případě dávkového vstupu se chyby řeší pro každý graf jednotlivě

náhodná čísla:
library( random )
načtení: use_module( library( random ) ).
https://www.fi.muni.cz/~hanka/sicstus/doc/html/sicstus/lib_002drandom.html#lib_002drandom

ukázkový vstup (možná podoba):

interaktivní režim (za > je vstup uživatele):
> graph.
> create_graph( 'test01' ).
vertices( N ).> 16
edges( Min, Max ).> 8, 150
add_edge( Probability ).> 0.5
remove_edge( Probability ).> 0.5
duration( BeginTime, EndTime ).> date( 2012, 4, 5, 14, 00 ), date( 2012, 4, 7, 22, 00 )
generating 'test01.graph' ... done.
generating 'test01.dot' ... done.

>

dávkový režim:

% gen_graph.pl
create_graph( 'test01.graph', 'test01.dot' ).
vertices( 16 ).
edges( 8, 150 ).
add_edge( _, 0.5 ).
remove_edge( _, _, 0.5 ).
duration( date( 2012, 4, 5, 14, 00 ), date( 2012, 4, 7, 22, 00 ) ).

create_graph( 'test02.graph' ).
vertices( 256 ).
edges( 0, ( 256 * 255 ) / 2 ).
new_edge( 0, 0.9 ).
new_edge( Time, 0.8 ) :- Time mod 60 =:= 0, !.
new_edge( _Time, 0.1 ).
remove_edge( _Time, Duration, Probability ) :- Duration >= 120, !, Probability = 1.
remove_edge( _Time, Duration, Probability ) :- Probability is duration / 120.
duration( date( 1970, 1, 1, 0, 0 ), date( 2038, 1, 19, 3, 14 ) ).

end_of_file.
