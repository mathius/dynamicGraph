# =================== DynamicGraph ====================
# =========== time-dependent graph analyser ===========
# Authors: Andrej Krejcir, Martin Ukrop, Vladimir Still
# 
# Write 'help.' to display help summary.
# Time interval beginning set: 2013-3-13 0:0
# Time interval end set: 2013-3-13 0:0
|: heelp.
! These is no such command: heelp/0
|: help.
# === List of commands
# All commands are prolog predicates and must end with a dot.
# Shorter command equivalents are written in parentheses.
# 
# == Graph manipulating commands
# graphLoad/1           (gl/1)  load graph from specified file
# graphGenerate/1       (gg/1)  generate new graph (settings from file)
# graphGenerate/0       (gg/0)  generate new graph (interactive)
# graph/0               (g/0)   display info about currently loaded graph
# 
# == Time commands
# timeBegin/1           (tb/1)  set beginning of time interval
# timeBegin/0           (tb/0)  set first edge occurence as beginning
# timeEnd/1             (te/1)  set end of time interval
# timeEnd/0             (te/0)  set last edge occurence as end
# timeInterval/2        (ti/2)  set beginning/end of time interval
# timeInterval/0        (ti/0)  set time from first to last edge occurence
# timeMoment/1          (tm/1)  set both beginning/end of time interval
# time/0                (t/0)   display currently set time
# 
# == Graphviz output commands
# graphviz/1            (gv/1)  enable Graphviz outputs to specified folder
# graphvizOff/0         (gvo/0) disable Graphviz outputs
# 
# == Graph statistics commands
# statsNodes/0          (sn/0)  display statistics for nodes
# statsEdges/0          (se/0)  display statistics for edges
# statsComponents/0     (sc/0)  display stats for components at the beginning
# statsProgress/0       (sp/0)  display times when graph is changing
# statsAnalyseNode/1    (san/1) analyse given node
# statsMaxComponent/0   (smc/0) find maximal component
# 
# == Other
# help/0                (h/0)   display the list of commands
# quit/0                (q/0)   quit DynamicGraph session
|: graphLoad('graph5.pl').
# Successfully loaded: graph5
|: graph.
# Graph loaded: graph5
# n1 -> n2, from 2013-5-14 20:0 to 2013-5-14 21:0
# n3 -> n4, from 2013-5-14 20:0 to 2013-5-14 21:0
# n4 -> n5, from 2013-5-14 20:0 to 2013-5-14 21:0
# n4 -> n11, from 2013-5-14 20:0 to 2013-5-14 21:0
# n4 -> n10, from 2013-5-14 20:0 to 2013-5-14 21:0
# n5 -> n8, from 2013-5-14 20:0 to 2013-5-14 21:0
# n5 -> n9, from 2013-5-14 20:0 to 2013-5-14 21:0
# n6 -> n7, from 2013-5-14 20:0 to 2013-5-14 21:0
# n7 -> n11, from 2013-5-14 20:0 to 2013-5-14 21:0
# n8 -> n9, from 2013-5-14 20:0 to 2013-5-14 21:0
# n9 -> n10, from 2013-5-14 20:0 to 2013-5-14 21:0
# n10 -> n11, from 2013-5-14 20:0 to 2013-5-14 21:0
# n1 -> n6, from 2013-5-14 20:30 to 2013-5-14 22:30
|: graphviz('graphviz').
# Graphviz output enabled to directory 'graphviz'.
|: graphGenerate.
? Enter name of graph: 
|: testGraph.
? Enter number of nodes: 
|: 10.
? Enter number of edges (min, max separated by dot): 
|: 10.
|: 15.
? Enter probability of emergence of new edge: 
|: 0.5.
? Enter probability of removal of edge: 
|: 0.5.
? Enter duration of graph: (dot separated, YYYY-MM-DD+HH:MM): 
|: 2013-1-1+0:0.
|: 2013-1-2+0:0.
# Generating graph...
# Writing to file: testGraph.pl...
# Finished.
|: statsEdges.
# Number of edges in graph: 13
# Edge with longest time interval:
# Edge from: n1 to n6
# Start time: 2013-5-14 20:30
# End time:   2013-5-14 22:30
# Interval: 120 min
# 
# Edge with shortest time interval:
# Edge from: n1 to n2
# Start time: 2013-5-14 20:0
# End time:   2013-5-14 21:0
# Interval: 60 min
|: statsNodes.
# Number of nodes in graph: 11
# 
# Node with maximum degree is: 
# Name: n4
# Degree: 4
# 
# Node with minimum degree is: 
# Name: n2
# Degree: 1
|: statsComponents.
# Label: n1
# Size: 2
# Nodes: n2 n1 
# 
# Label: n3
# Size: 9
# Nodes: n6 n7 n11 n10 n9 n8 n5 n4 n3
|: statsMaxComponent. 
# Time: 2013-5-14 20:30
# Label: n1
# Size: 11
# Nodes: n3 n10 n9 n8 n5 n4 n11 n7 n6 n2 n1 